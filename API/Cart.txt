export interface Basket {
  customerId: string;
  basketItem: BasketItem[];
  clientSecret?: string;
  paymentIntentId?: string;
  deliveryMethodId?: number;
  shippingPrice?: number;
}

  
  export interface BasketItem {
    basketItemId?: number
    productId:number
    productName: string
    price: number
    quantity: number
    picUrl: string
    brand: string
    category: string
    subCategory: string
  }
  

  export class ClBasket implements Basket {
    customerId=uuidv4();
    basketItem: BasketItem[] = [];
  }
  
export interface BasketTotals{
  shipping: number
  subtotal:number | undefined
  total:number
}
This is model.ts
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { BehaviorSubject, Observable, map } from 'rxjs';
import { environment } from 'src/environments/environment.development';
import { Basket, BasketItem, BasketTotals, ClBasket } from '../shared/models/basket';
import { Product } from '../shared/models/product';
import { DeliveryMethod } from '../shared/models/deliveryMethod';

@Injectable({
  providedIn: 'root'
})
export class BasketService {

  baseUrl = environment.apiUrl;
  private basketSource = new BehaviorSubject<Basket| null>(null);
  basket$ =this.basketSource.asObservable();
  private basketTotalSource = new BehaviorSubject<BasketTotals | null>(null);
  basketTotal$ = this.basketTotalSource.asObservable();
  shipping = 0;

  constructor(private http: HttpClient) {}

  createPaymentIntent() {
    return this.http.post<Basket>(this.baseUrl + 'Payment/' + this.getCurrentBasketValue()?.customerId, {})
      .pipe(
        map(basket => {
          this.basketSource.next(basket);
        })
      )
  }


  setShippingPrice(deliveryMethod: DeliveryMethod){
    this.shipping=deliveryMethod.price;
    const basket = this.getCurrentBasketValue();
    if (basket) {
      basket.deliveryMethodId = deliveryMethod.delMethId;
      basket.shippingPrice = deliveryMethod.price;
      this.calculateTotals()
      this.setBasket(basket);
    }
    }


  getBasket(id: string): Observable<Basket>{
     return this.http.get<Basket>(this.baseUrl+'Basket?id='+id)
     .pipe(
      map((basket: Basket)=>{
        this.basketSource.next(basket);
        if (typeof basket.shippingPrice === 'number') {
          this.shipping = basket.shippingPrice;
        } else {
          this.shipping = 0;
        }
        this.calculateTotals();
        return basket;
      })
     )
  }

  setBasket(basket: Basket) {
    return this.http.post<Basket>(this.baseUrl + 'Basket', basket).subscribe(
      (response: Basket) => {
        this.basketSource.next(response);
        this.calculateTotals();
      },
      (error) => {
        console.log(error);
      }
    );
  }

  getCurrentBasketValue(){
    return this.basketSource.value;
  }

  addItemToBasket(item: Product, quantity = 1) {
    const itemToAdd: BasketItem = this.mapProductItemToBasketItem(item, quantity);
  
    let basket = this.getCurrentBasketValue();
    if (!basket) {
      basket = this.createBasket();
    }
  
    basket.basketItem = this.addOrUpdateItem(basket.basketItem, itemToAdd, quantity);
  
    this.setBasket(basket);
  }
  

  private addOrUpdateItem(basketItem: BasketItem[], itemToAdd: BasketItem, quantity: number): BasketItem[] {
    console.log(basketItem);
    const index = basketItem.findIndex(i=>i.productId==itemToAdd.productId);
    if(index === -1){
      itemToAdd.quantity = quantity;
      basketItem.push(itemToAdd);
    }else{
      basketItem[index].quantity += quantity;
    }
    return basketItem;
  }


  private createBasket(): Basket {
    const basket =  new ClBasket();
    localStorage.setItem('basket_id',basket.customerId)
    return basket;
  }


  private mapProductItemToBasketItem(item: Product, quantity: number): BasketItem {
    return{
      productId:item.productId,
      productName: item.productName,
      price:item.price,
      picUrl:item.productImage,
      quantity,
      category:item.category,
      subCategory:item.subCategory,
      brand:item.brand
    }
  }

  private calculateTotals(){
    const basket = this.getCurrentBasketValue();
    const shipping = this.shipping;
    const subtotal = basket?.basketItem.reduce((a,b)=>(b.price*b.quantity)+a,0);
    const total = subtotal! + shipping;
    this.basketTotalSource.next({shipping,total,subtotal});

  }

  incrementItemQuantity(item: BasketItem) {
    const basket = this.getCurrentBasketValue();
    const foundItemIndex = basket?.basketItem.findIndex(a => a.productId === item.productId);
    if (foundItemIndex !== undefined && foundItemIndex !== -1) {
      if (basket?.basketItem[foundItemIndex].quantity !== undefined) {
        basket.basketItem[foundItemIndex].quantity++;
        this.setBasket(basket);
      }
    }
  }
  
  decrementItemQuantity(item: BasketItem) {
    const basket = this.getCurrentBasketValue();
    
    if (basket) {
      const foundItemIndex = basket.basketItem.findIndex(a => a.productId === item.productId);
  
      if (foundItemIndex !== undefined && foundItemIndex !== -1) {
        if (basket.basketItem[foundItemIndex].quantity > 1) {
          basket.basketItem[foundItemIndex].quantity--;
          this.setBasket(basket);
        } else {
          this.removeItemFromBasket(item);
        }
      }
    }
  }
  
  deleteBasketItem(basketItemId: number): Observable<any> {
    return this.http.delete(${this.baseUrl}Basket/${basketItemId});
}

  

removeItemFromBasket(item: BasketItem) {
  const basketItemId = item.basketItemId;

  if (basketItemId !== undefined) {
      this.deleteBasketItem(basketItemId).subscribe(
          () => {
              console.log('Item removed from the database');
              const basket = this.getCurrentBasketValue();

              if (basket?.basketItem.some(a => a.basketItemId == basketItemId)) {
                 
                  basket.basketItem = basket.basketItem.filter(i => i.basketItemId != basketItemId);

                  if (basket.basketItem.length > 0) {
                      this.setBasket(basket);
                  } else {
                      this.deleteBasket(basket);
                  }
              }
          },
          (error) => {
              console.error('Error removing item from the database:', error);
          }
      );
  }
}



  deleteBasket(basket: Basket) {
 return this.http.delete<Basket>(this.baseUrl+'Basket?id='+basket.customerId).subscribe(()=>{this.basketSource.next(null);
 this.basketTotalSource.next(null);
 localStorage.removeItem('basket_id');
},error=>{
  console.log(error)
});
  
  }

  deleteLocalBasket() {
    this.basketSource.next(null);
    this.basketTotalSource.next(null);
    localStorage.removeItem('basket_id');
  }
}
import { Component } from '@angular/core';
import { Observable } from 'rxjs';
import { Basket, BasketItem } from '../shared/models/basket';
import { BasketService } from './basket.service';

@Component({
  selector: 'app-basket',
  templateUrl: './basket.component.html',
  styleUrls: ['./basket.component.css']
})
export class BasketComponent {
basket$!: Observable<Basket| null>;

constructor(private basketService:BasketService){}
ngOnInit(){
  this.basket$ = this.basketService.basket$;
}

removeBasketItem(item:BasketItem){
this.basketService.removeItemFromBasket(item);
}

incrementItemQuantity(item:BasketItem){
this.basketService.incrementItemQuantity(item);
}

decrementItemQuantity(item:BasketItem){
  this.basketService.decrementItemQuantity(item)
}

}
 want cart angular for 
using IsDB_R57_Solely.DAL.Interfaces;
using IsDB_R57_Solely.Entities.Cart;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace IsDB_R57_Solely.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CartController : ControllerBase
    {
        public readonly ICartRepository _repo;

        public CartController(ICartRepository cart)
        {
            _repo = cart;
        }

        [HttpGet]
        public async Task<ActionResult<Cart>> Get(int id)
        {
            var cart = await _repo.GetCartAsync(id);
            return Ok(cart?? new Cart(id));
        }

        [HttpPost]
        public async Task<ActionResult<Cart>> Put(Cart cart)
        {
            var updateCart = await _repo.UpdateCartAsync(cart);
            return Ok(updateCart);
        }

        [HttpDelete]
        public async Task DeleteCart(int id)
        {
            await _repo.DeleteCartAsync(id);
        }

        [HttpDelete("{id}")]
        public async Task DeleteItem(int id)
        {
            await _repo.DeleteCartItem(id);
        }
    }
}
this controller 
Create cart.model.ts cart.service.ts cart.component.ts and cart.component.html