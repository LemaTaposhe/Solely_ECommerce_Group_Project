// <auto-generated />
using System;
using IsDB_R57_Solely.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IsDB_R57_Solely.Migrations
{
    [DbContext(typeof(SolelyDbContext))]
    [Migration("20240823082936_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Cart.Cart", b =>
                {
                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("DelivaryMethodId")
                        .HasColumnType("int");

                    b.HasKey("CartId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Cart.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"));

                    b.Property<string>("CartId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Inspection", b =>
                {
                    b.Property<int>("InspectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InspectionId"));

                    b.Property<int?>("InsepectionStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("InspectionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InspectionNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequistionId")
                        .HasColumnType("int");

                    b.HasKey("InspectionId");

                    b.HasIndex("RequistionId");

                    b.ToTable("Inspection");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Purchase", b =>
                {
                    b.Property<int>("PurchaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PurchaseId"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("PurchaseDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PurchaseQuantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("PurchaseId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Requisition", b =>
                {
                    b.Property<int>("RequisitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequisitionId"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequisitionDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("RequisitionId");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Requisitions");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StockId"));

                    b.Property<DateTime>("LastPurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("StockId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stocks");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("SupplierId");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.DeliveryMethod", b =>
                {
                    b.Property<int>("DeliveryMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryMethodId"));

                    b.Property<string>("DeliveryTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("DeliveryMethodId");

                    b.ToTable("DeliveryMethods");

                    b.HasData(
                        new
                        {
                            DeliveryMethodId = 1,
                            DeliveryTime = "1-2 Days",
                            Description = "Fastest delivery time",
                            Price = 120.00m,
                            ShortName = "RedX",
                            isActive = true
                        },
                        new
                        {
                            DeliveryMethodId = 2,
                            DeliveryTime = "2-5 Days",
                            Description = "Get it within 5 days",
                            Price = 80.00m,
                            ShortName = "SA",
                            isActive = true
                        },
                        new
                        {
                            DeliveryMethodId = 3,
                            DeliveryTime = "5-7 Days",
                            Description = "Slower but cheap",
                            Price = 50.00m,
                            ShortName = "Shundarban",
                            isActive = true
                        },
                        new
                        {
                            DeliveryMethodId = 4,
                            DeliveryTime = "1-2 Month",
                            Description = "Free! You get what you pay for",
                            Price = 0.00m,
                            ShortName = "FREE",
                            isActive = true
                        });
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InvoiceId"));

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("InvoiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderNote")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("DeliveryMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.Return", b =>
                {
                    b.Property<int>("ReturnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnId"));

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int?>("ReturnReason")
                        .HasColumnType("int");

                    b.HasKey("ReturnId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderId");

                    b.ToTable("Returns");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Payments.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Products.Brand", b =>
                {
                    b.Property<int>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("BrandId");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            BrandId = 1,
                            Description = "Swedish multinational company known for ready-to-assemble furniture, kitchen appliances, and home accessories.",
                            Name = "Ikea",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 2,
                            Description = "American furniture store chain offering a wide range of home furniture and accessories.",
                            Name = "Ashley Furniture",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 3,
                            Description = "Retailer specializing in modern furniture and home decor.",
                            Name = "West Elm",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 4,
                            Description = "Offers classic and stylish home furnishings and decor.",
                            Name = "Pottery Barn",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 5,
                            Description = "Provides a variety of furniture and home goods with a focus on modern design.",
                            Name = "Crate & Barrel",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 6,
                            Description = "Online retailer offering a vast selection of furniture, home decor, and more.",
                            Name = "Wayfair",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 7,
                            Description = "Contemporary furniture store known for modern and eclectic home decor.",
                            Name = "CB2",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 8,
                            Description = "High-end furniture manufacturer and retailer with a focus on custom designs and classic styles.",
                            Name = "Ethan Allen",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 9,
                            Description = "Specializes in comfortable recliners, sofas, and home furnishings.",
                            Name = "La-Z-Boy",
                            isActive = true
                        },
                        new
                        {
                            BrandId = 10,
                            Description = "Designs and manufactures innovative furniture and office solutions.",
                            Name = "Herman Miller",
                            isActive = true
                        });
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Products.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Furniture and decor for living rooms.",
                            Name = "Living Room",
                            isActive = true
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Furniture and accessories for bedrooms.",
                            Name = "Bedroom",
                            isActive = true
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Furniture for dining areas, including tables and chairs.",
                            Name = "Dining Room",
                            isActive = true
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Furniture and decor for home and office workspaces.",
                            Name = "Office",
                            isActive = true
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Furniture and accessories for outdoor spaces.",
                            Name = "Outdoor",
                            isActive = true
                        });
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Products.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int?>("BrandId")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("TagId")
                        .HasColumnType("int");

                    b.Property<string>("ThumbnailImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TagId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            BrandId = 1,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9030),
                            Description = "Comfortable and stylish sofa with deep cushions.",
                            Name = "Ikea EKTORP Sofa",
                            NormalizedName = "IKEAEKTORP SOFA",
                            Price = 499.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f1.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 2,
                            BrandId = 2,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9033),
                            Description = "Classic recliner chair with plush cushioning.",
                            Name = "Ashley Furniture Madison Recliner",
                            NormalizedName = "ASHLEY FURNITURE MADISON RECLINER",
                            Price = 350.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f2.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 3,
                            BrandId = 3,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9035),
                            Description = "Elegant dining table with a mid-century modern design.",
                            Name = "West Elm Mid-Century Dining Table",
                            NormalizedName = "WEST ELM MID-CENTURY DINING TABLE",
                            Price = 750.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f3.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 4,
                            BrandId = 4,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9038),
                            Description = "Rustic bed with a classic farmhouse design.",
                            Name = "Pottery Barn Farmhouse Bed",
                            NormalizedName = "POTTERY BARN FARMHOUSE BED",
                            Price = 950.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f4.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 5,
                            BrandId = 5,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9040),
                            Description = "Sleek and modern desk perfect for a home office.",
                            Name = "Crate & Barrel Barrett Desk",
                            NormalizedName = "CRATE & BARREL BARRETT DESK",
                            Price = 400.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f5.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 6,
                            BrandId = 1,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9042),
                            Description = "Versatile shelving unit for books and decor.",
                            Name = "Ikea KALLAX Shelf",
                            NormalizedName = "IKEAKALLAX SHELF",
                            Price = 89.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f6.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 7,
                            BrandId = 2,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9044),
                            Description = "Spacious and comfortable L-shaped sectional sofa.",
                            Name = "Ashley Furniture L-shaped Sofa",
                            NormalizedName = "ASHLEY FURNITURE L-SHAPED SOFA",
                            Price = 999.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f7.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 8,
                            BrandId = 3,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9047),
                            Description = "Elegant leather armchair with mid-century modern design.",
                            Name = "West Elm Leather Armchair",
                            NormalizedName = "WEST ELM LEATHER ARMCHAIR",
                            Price = 550.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f8.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 9,
                            BrandId = 4,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9049),
                            Description = "Solid wood dining table with a rustic farmhouse design.",
                            Name = "Pottery Barn Farmhouse Dining Table",
                            NormalizedName = "POTTERY BARN FARMHOUSE DINING TABLE",
                            Price = 200.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f9.jpg",
                            isActive = true
                        },
                        new
                        {
                            ProductId = 10,
                            BrandId = 5,
                            CreatedOn = new DateTime(2024, 8, 23, 14, 29, 34, 91, DateTimeKind.Local).AddTicks(9051),
                            Description = "Stylish coffee table with a sleek glass top and metal base.",
                            Name = "Crate & Barrel Sutton Coffee Table",
                            NormalizedName = "CRATE & BARREL SUTTON COFFEE TABLE",
                            Price = 320.00m,
                            ThumbnailImage = "http://localhost:5000/ProductImage/f10.jpg",
                            isActive = true
                        });
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Products.ProductPriceHistory", b =>
                {
                    b.Property<int>("ProductPriceHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductPriceHistoryId"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("OldPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductPriceHistoryId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductPriceHistories");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Products.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            Description = "Contemporary furniture designs with clean lines and minimalistic approach.",
                            Name = "Modern",
                            isActive = true
                        },
                        new
                        {
                            TagId = 2,
                            Description = "Classic furniture designs that reflect the styles of the past.",
                            Name = "Vintage",
                            isActive = true
                        },
                        new
                        {
                            TagId = 3,
                            Description = "Furniture made from sustainable or recycled materials.",
                            Name = "Eco-Friendly",
                            isActive = true
                        },
                        new
                        {
                            TagId = 4,
                            Description = "Items currently on sale or discounted.",
                            Name = "Sale",
                            isActive = true
                        },
                        new
                        {
                            TagId = 5,
                            Description = "Recently added furniture items to the store.",
                            Name = "New Arrival",
                            isActive = true
                        },
                        new
                        {
                            TagId = 6,
                            Description = "Popular items that are best-selling among customers.",
                            Name = "Best Seller",
                            isActive = true
                        },
                        new
                        {
                            TagId = 7,
                            Description = "High-end furniture with premium quality and design.",
                            Name = "Luxury",
                            isActive = true
                        },
                        new
                        {
                            TagId = 8,
                            Description = "Furniture designed for small spaces and efficient use of space.",
                            Name = "Compact",
                            isActive = true
                        },
                        new
                        {
                            TagId = 9,
                            Description = "Furniture designed for comfort and efficiency in workspace settings.",
                            Name = "Ergonomic",
                            isActive = true
                        },
                        new
                        {
                            TagId = 10,
                            Description = "Furniture that can be customized to fit individual preferences and needs.",
                            Name = "Custom",
                            isActive = true
                        });
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Users.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AddressId");

                    b.HasIndex("DistrictId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Users.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictId"));

                    b.Property<int>("DivisionId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("DistrictId");

                    b.HasIndex("DivisionId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Users.Division", b =>
                {
                    b.Property<int>("DivisionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DivisionId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("DivisionId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8023b9cf-5ec0-4736-af0f-ff0da81adec1",
                            CreatedOn = new DateTime(2024, 8, 23, 8, 29, 34, 91, DateTimeKind.Utc).AddTicks(9453),
                            EmailConfirmed = false,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user1@example.com",
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "56cb64b9-96c9-4dcd-94b9-feb495b38b9f",
                            CreatedOn = new DateTime(2024, 8, 23, 8, 29, 34, 91, DateTimeKind.Utc).AddTicks(9457),
                            EmailConfirmed = false,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "user2@example.com",
                            isActive = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Super Admin",
                            NormalizedName = "SUPER ADMIN"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Officer",
                            NormalizedName = "OFFICER"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Cart.CartItem", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Cart.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IsDB_R57_Solely.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Inspection", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Inventory.Requisition", "Requisition")
                        .WithMany()
                        .HasForeignKey("RequistionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Requisition");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Purchase", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IsDB_R57_Solely.Entities.Inventory.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Requisition", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("IsDB_R57_Solely.Entities.Inventory.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Product");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Inventory.Stock", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.Invoice", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.Order", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Orders.DeliveryMethod", "DeliveryMethod")
                        .WithMany()
                        .HasForeignKey("DeliveryMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("IsDB_R57_Solely.DAL.ViewModel.OrderAddress", "ShippingAddress", b1 =>
                        {
                            b1.Property<int>("OrderId")
                                .HasColumnType("int");

                            b1.Property<string>("AddressLine1")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("AddressLine2")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("City")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int?>("DistrictId")
                                .HasColumnType("int");

                            b1.Property<string>("Phone")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("OrderId");

                            b1.ToTable("OrderAddresses");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("DeliveryMethod");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.OrderItem", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Orders.Order", null)
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.Return", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Orders.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("IsDB_R57_Solely.Entities.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Products.Product", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Products.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("IsDB_R57_Solely.Entities.Products.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("IsDB_R57_Solely.Entities.Products.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Products.ProductPriceHistory", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Users.Address", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Users.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId");

                    b.HasOne("IsDB_R57_Solely.Entities.Users.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("IsDB_R57_Solely.Entities.Users.Address", "UserId");

                    b.Navigation("District");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Users.District", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Users.Division", "Division")
                        .WithMany("Districts")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IsDB_R57_Solely.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("IsDB_R57_Solely.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Cart.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Users.Division", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("IsDB_R57_Solely.Entities.Users.User", b =>
                {
                    b.Navigation("Address");
                });
#pragma warning restore 612, 618
        }
    }
}
